// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package mock_easyalert is a generated GoMock package.
package mocks

import (
	easyalert "github.com/bakku/easyalert"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserRepository is a mock of UserRepository interface
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// FindUser mocks base method
func (m *MockUserRepository) FindUser(query string, params ...interface{}) (easyalert.User, error) {
	varargs := []interface{}{query}
	for _, a := range params {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindUser", varargs...)
	ret0, _ := ret[0].(easyalert.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUser indicates an expected call of FindUser
func (mr *MockUserRepositoryMockRecorder) FindUser(query interface{}, params ...interface{}) *gomock.Call {
	varargs := append([]interface{}{query}, params...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUser", reflect.TypeOf((*MockUserRepository)(nil).FindUser), varargs...)
}

// FindUsers mocks base method
func (m *MockUserRepository) FindUsers() ([]easyalert.User, error) {
	ret := m.ctrl.Call(m, "FindUsers")
	ret0, _ := ret[0].([]easyalert.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUsers indicates an expected call of FindUsers
func (mr *MockUserRepositoryMockRecorder) FindUsers() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUsers", reflect.TypeOf((*MockUserRepository)(nil).FindUsers))
}

// CreateUser mocks base method
func (m *MockUserRepository) CreateUser(user easyalert.User) (easyalert.User, error) {
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(easyalert.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockUserRepositoryMockRecorder) CreateUser(user interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), user)
}

// UpdateUser mocks base method
func (m *MockUserRepository) UpdateUser(user easyalert.User) (easyalert.User, error) {
	ret := m.ctrl.Call(m, "UpdateUser", user)
	ret0, _ := ret[0].(easyalert.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser
func (mr *MockUserRepositoryMockRecorder) UpdateUser(user interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserRepository)(nil).UpdateUser), user)
}

// DeleteUser mocks base method
func (m *MockUserRepository) DeleteUser(user easyalert.User) error {
	ret := m.ctrl.Call(m, "DeleteUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser
func (mr *MockUserRepositoryMockRecorder) DeleteUser(user interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserRepository)(nil).DeleteUser), user)
}
