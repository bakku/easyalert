// Code generated by MockGen. DO NOT EDIT.
// Source: alert.go

// Package mock_easyalert is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	easyalert "github.com/bakku/easyalert"
	gomock "github.com/golang/mock/gomock"
)

// MockAlertRepository is a mock of AlertRepository interface
type MockAlertRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAlertRepositoryMockRecorder
}

// MockAlertRepositoryMockRecorder is the mock recorder for MockAlertRepository
type MockAlertRepositoryMockRecorder struct {
	mock *MockAlertRepository
}

// NewMockAlertRepository creates a new mock instance
func NewMockAlertRepository(ctrl *gomock.Controller) *MockAlertRepository {
	mock := &MockAlertRepository{ctrl: ctrl}
	mock.recorder = &MockAlertRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAlertRepository) EXPECT() *MockAlertRepositoryMockRecorder {
	return m.recorder
}

// FindAlert mocks base method
func (m *MockAlertRepository) FindAlert(query string, params ...interface{}) (easyalert.Alert, error) {
	varargs := []interface{}{query}
	for _, a := range params {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAlert", varargs...)
	ret0, _ := ret[0].(easyalert.Alert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAlert indicates an expected call of FindAlert
func (mr *MockAlertRepositoryMockRecorder) FindAlert(query interface{}, params ...interface{}) *gomock.Call {
	varargs := append([]interface{}{query}, params...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAlert", reflect.TypeOf((*MockAlertRepository)(nil).FindAlert), varargs...)
}

// FindAlerts mocks base method
func (m *MockAlertRepository) FindAlerts(query string, params ...interface{}) ([]easyalert.Alert, error) {
	varargs := []interface{}{query}
	for _, a := range params {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAlerts", varargs...)
	ret0, _ := ret[0].([]easyalert.Alert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAlerts indicates an expected call of FindAlerts
func (mr *MockAlertRepositoryMockRecorder) FindAlerts(query interface{}, params ...interface{}) *gomock.Call {
	varargs := append([]interface{}{query}, params...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAlerts", reflect.TypeOf((*MockAlertRepository)(nil).FindAlerts), varargs...)
}

// CreateAlert mocks base method
func (m *MockAlertRepository) CreateAlert(alert easyalert.Alert) (easyalert.Alert, error) {
	ret := m.ctrl.Call(m, "CreateAlert", alert)
	ret0, _ := ret[0].(easyalert.Alert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAlert indicates an expected call of CreateAlert
func (mr *MockAlertRepositoryMockRecorder) CreateAlert(alert interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAlert", reflect.TypeOf((*MockAlertRepository)(nil).CreateAlert), alert)
}

// UpdateAlert mocks base method
func (m *MockAlertRepository) UpdateAlert(alert easyalert.Alert) (easyalert.Alert, error) {
	ret := m.ctrl.Call(m, "UpdateAlert", alert)
	ret0, _ := ret[0].(easyalert.Alert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAlert indicates an expected call of UpdateAlert
func (mr *MockAlertRepositoryMockRecorder) UpdateAlert(alert interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAlert", reflect.TypeOf((*MockAlertRepository)(nil).UpdateAlert), alert)
}

// DeleteAlert mocks base method
func (m *MockAlertRepository) DeleteAlert(alert easyalert.Alert) error {
	ret := m.ctrl.Call(m, "DeleteAlert", alert)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAlert indicates an expected call of DeleteAlert
func (mr *MockAlertRepositoryMockRecorder) DeleteAlert(alert interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAlert", reflect.TypeOf((*MockAlertRepository)(nil).DeleteAlert), alert)
}
